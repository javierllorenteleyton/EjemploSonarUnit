<?xml version="1.0" encoding="UTF-8" ?>
<!--Ant buildfile generated by Oracle JDeveloper-->
<!--Generated Mar 7, 2017 7:04:40 PM-->
<project name="ModelTest" default="all">
  <property file="buildTest.properties"/>
  <property name="xms" value="-Xms256m" />
	<property name="xmx" value="-Xmx1024m" />
  <import file="./libraryTest.xml"/>
  <import file="lib/ant/junitpdfreport/build-junitpdfreport.xml" />
  <target name="test.init">
    <tstamp/>
    <mkdir dir="${output.dir}"/>
    <!-- create JUNIT dir-->
    <mkdir dir="${testresults.dir}"/>
    <mkdir dir="${testresults.dir}/html"/>
    <mkdir dir="${instrumented.dir}"/>
    <mkdir dir="${reports.xml.dir}"/>
    <mkdir dir="${reports.html.dir}"/>
    <mkdir dir="${coverage.xml.dir}"/>
    <mkdir dir="${coverage.html.dir}"/>
  </target>
  <target name="test.all" description="Build the project"
          depends="test.compile,test.copy"/>
  <target name="test.clean" description="Clean the project">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${output.dir}" includes="**/*"/>
      <fileset dir="${testresults.dir}" includes="**/*"/>
      <fileset dir="${testresults.dir}/html" includes="**/*"/>
    </delete>
  </target>
  <target name="test.compile" description="Compile Java source files"
          depends="test.init">
    <javac destdir="${output.dir}" classpathref="classpath"
           debug="${javac.debug}" nowarn="${javac.nowarn}"
           deprecation="${javac.deprecation}" encoding="UTF-8" source="1.6"
           target="1.6">
      <src path="src"/>
    </javac>
  </target>
  <target name="test.copy" description="Copy files to output directory"
          depends="test.init">
    <patternset id="copy.patterns">
      <include name="**/*.gif"/>
      <include name="**/*.jpg"/>
      <include name="**/*.jpeg"/>
      <include name="**/*.png"/>
      <include name="**/*.properties"/>
      <include name="**/*.xml"/>
      <include name="**/*.ejx"/>
      <include name="**/*.xcfg"/>
      <include name="**/*.cpx"/>
      <include name="**/*.dcx"/>
      <include name="**/*.sva"/>
      <include name="**/*.wsdl"/>
      <include name="**/*.ini"/>
      <include name="**/*.tld"/>
      <include name="**/*.tag"/>
      <include name="**/*.xlf"/>
      <include name="**/*.xsl"/>
      <include name="**/*.xsd"/>
    </patternset>
    <copy todir="${output.dir}">
      <fileset dir="src">
        <patternset refid="copy.patterns"/>
      </fileset>
    </copy>
  </target>
  <target name="instrument" depends="test.init,test.compile">
    <!--
			Remove the coverage data file and any old instrumentation.
		-->
    <delete file="${reports.dir}/basic_coverage.ser"/>
    <delete dir="${instrumented.dir}"/>
    <!--
			Instrument the application classes, writing the
			instrumented classes into ${build.instrumented.dir}.
		-->
    <cobertura-instrument todir="${instrumented.dir}">
      <!--
				The following line causes instrument to ignore any
				source line containing a reference to slf4j/logback, for the
				purposes of coverage reporting.
			-->
      <ignore regex="org.slf4j.*"/>
      <fileset dir="../Model/classes">
        <!--
					Instrument all the application classes, but
					don't instrument the test classes.
				-->
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>
  </target>
  <target name="testCover" depends="instrument">
    <junit fork="yes" failureproperty="test.failed">
      <!--
				Specify the name of the coverage data file to use.
			-->
      <sysproperty key="net.sourceforge.cobertura.datafile"
                   file="${reports.dir}/basic_coverage.ser"/>
      <!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
      <classpath location="${instrumented.dir}"/>
      <classpath location="./classes"/>
      <!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
      <classpath refid="cobertura.classpath"/>
      <formatter type="xml"/>
      <test name="com.avanttic.ejemplo.test.AllTests" todir="${reports.xml.dir}"
            if="testcase"/>
      <batchtest todir="${reports.xml.dir}" unless="testcase">
        <fileset dir="./src">
          <include name="**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>
    <junitreport todir="${reports.xml.dir}">
      <fileset dir="${reports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${reports.html.dir}"/>
    </junitreport>
  </target>
  <target name="coverage-check">
    <cobertura-check branchrate="34" totallinerate="100"/>
  </target>
  <target name="coverage-report">
    <!--
			Generate an XML file containing the coverage data using
			the "srcdir" attribute.
		-->
    <cobertura-report srcdir="../Model/src" destdir="${coverage.xml.dir}"
                      format="xml"
                      datafile="${reports.dir}/basic_coverage.ser"/>
  </target>
  <target name="summary-coverage-report">
    <!--
			Generate an summary XML file containing the coverage data using
			the "srcdir" attribute.
		-->
    <cobertura-report srcdir="../Model/src" destdir="${coverage.summaryxml.dir}"
                      datafile="${reports.dir}/basic_coverage.ser"
                      format="summaryXml"/>
  </target>
  <target name="alternate-coverage-report">
    <!--
			Generate a series of HTML files containing the coverage
			data in a user-readable form using nested source filesets.
		-->
    <cobertura-report destdir="${coverage.html.dir}"
                      datafile="${reports.dir}/basic_coverage.ser">
      <fileset dir="../Model/src">
        <include name="**/*.java"/>
      </fileset>
    </cobertura-report>
  </target>
  <target name="clean"
          description="Remove all files created by the build/test process.">
    <delete dir="${classes.dir}"/>
    <delete dir="${instrumented.dir}"/>
    <delete dir="${reports.dir}"/>
    <delete file="cobertura.log"/>
    <delete file="cobertura.ser"/>
  </target>
  <target name="coverage"
          depends="test.compile,instrument,testCover,coverage-report,summary-coverage-report,alternate-coverage-report"
          description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>
  <target   name="junit" depends="test.init,test.compile"
          description="Run unit tests and code coverage reporting">
 
 <!-- PDF-Reports for JUnit -->
	
 
 <path id="classpath.test">
		 <pathelement location="../ModelTest/classes"/>
    <pathelement location="../Model/classes"/>
		<fileset dir="./lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
 
  
 
   <jacoco:coverage  destfile="${jacoco.dir}/jacoco.exec"  xmlns:jacoco="antlib:org.jacoco.ant">
     <junit  printsummary="true" fork="yes" failureproperty="test.failed"  forkmode="once">
     <jvmarg value="${xms}" />
				<jvmarg value="${xmx}" />
      <!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
 
    <classpath refid="classpath.test" />
        
      <!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
    
      <formatter type="xml"/>
    <!--
      <test name="com.avanttic.ejemplo.test.AllTests" todir="${jacoco.reports.dir}/junit"
            if="testcase"/>
      -->
      <batchtest todir="${jacoco.reports.dir}/junit">
        <fileset dir="./classes">
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
    
    </jacoco:coverage> 
   
    <jacoco:report   xmlns:jacoco="antlib:org.jacoco.ant">
          <executiondata>
              <file file="${jacoco.dir}/jacoco.exec"/>
          </executiondata>

          <structure name="jacoco-sample">
              <classfiles>
                  <fileset dir="../Model/classes"/>
              </classfiles> 
              <sourcefiles encoding="UTF-8">
                  <fileset dir="../Model/src"/>
              </sourcefiles>
             
          </structure>
          <html destdir="${jacoco.reports.dir}/coverage-report"/>
          <csv destfile="${jacoco.reports.dir}/csv/report.csv"/>
          <xml destfile="${jacoco.reports.dir}/xml/report.xml"/>
        </jacoco:report>
  
  
    </target>
    
</project>
